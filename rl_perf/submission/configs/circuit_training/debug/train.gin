import rl_perf.submission.submission_util
import rl_perf.metrics.system.profiler.memory_profiler
import rl_perf.metrics.system.codecarbon

import rl_perf.metrics.reliability.rl_reliability_metrics.evaluation.eval_metrics
import rl_perf.metrics.reliability.rl_reliability_metrics.metrics.metrics_online

# Set up submission object
Submission.mode = %BenchmarkMode.TRAIN
Submission.domain = %BenchmarkDomain.CIRCUIT_TRAINING
Submission.run_offline_metrics_only=True
Submission.measure_emissions=True


# Reliability
METRICS = [
# within runs
%ReliabilityMetrics.IqrWithinRuns,
%ReliabilityMetrics.LowerCVaROnDiffs,
%ReliabilityMetrics.MedianPerfDuringTraining,
]
Submission.reliability_metrics  = %METRICS

## Configure evaluation
eval_metrics.Evaluator.metrics = %METRICS
eval_metrics.Evaluator.timepoint_variable='Metrics/EnvironmentSteps'
eval_metrics.Evaluator.dependent_variable='Metrics/AverageReturn'
eval_metrics.Evaluator.align_on_global_step = True

FREQ_THRESH = 0.01
WINDOW_SIZE = 50 # window size can be used to capture eval points in small window around eval points

#EVAL_POINTS = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000]

WINDOW_SIZE = 310
WINDOW_SIZE_TRIMMED = 310
EVAL_POINTS =[ 342,  648,  958, 1220, 1492, 1764, 2042, 2298, 2568, 2834, 3104]

metrics_online.IqrWithinRuns.window_size = %WINDOW_SIZE_TRIMMED
metrics_online.IqrWithinRuns.eval_points = %EVAL_POINTS


#  baseline: Set to "curve_range" to normalize by the curve range, defined as
#            the 95th percentile minus the start value. Set to a float to simply
#            divide by that value. Set to None for no normalization.

metrics_online.IqrWithinRuns.baseline = None
metrics_online.LowerCVaROnDiffs.baseline = None
metrics_online.LowerCVaROnDrawdown.baseline = None

metrics_online.MedianPerfDuringTraining.window_size = %WINDOW_SIZE
metrics_online.MedianPerfDuringTraining.eval_points = %EVAL_POINTS


# Set up codecarbon for system metrics
track_emissions.project_name = 'rlperf_circuit_training_train_debug'
track_emissions.measure_power_secs = 1
track_emissions.save_to_file = True  # Save data to file
track_emissions.save_to_logger = False  # Do not save data to logger
track_emissions.gpu_ids = None  # Enter list of specific GPU IDs to track if desired
track_emissions.tracking_mode = 'process'  # Tracking mode set to 'offline'
track_emissions.log_level = 'info'  # Log level set to 'info'
track_emissions.country_iso_code = 'USA'
track_emissions.region = 'Massachusetts'
track_emissions.baseline_measure_sec=10
# track_emissions.default_cpu_tdp = 125 # if your CPU cannot be detected, set it manually

OfflineEmissionsTracker.country_2letter_iso_code = 'US'
OfflineEmissionsTracker.on_csv_write='append'
